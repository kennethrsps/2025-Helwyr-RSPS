package com.rs.game.player.content;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.rs.cache.loaders.ItemDefinitions;
import com.rs.game.player.Player;
import com.rs.utils.Logger;

/**
 * Core item balancing system
 * Place this in your game/item package
 */
public class AdjustStatsCommand {
    
    // Store original stats for rollback
    private static Map<Integer, ItemStats> originalStats = new HashMap<Integer, ItemStats>();
    
    /**
     * Handle adjust stats command
     */
    public static void handleAdjustCommand(Player player, String[] args) {
        try {
            int itemId = Integer.parseInt(args[0]);
            int tier = Integer.parseInt(args[1]);
            int classType = Integer.parseInt(args[2]);
            double intensity = args.length > 3 ? Double.parseDouble(args[3]) : 1.0;
            
            // Validation
            if (tier < 1 || tier > 5) {
                player.getPackets().sendGameMessage("Invalid tier! Use 1-5");
                return;
            }
            
            if (classType < 0 || classType > 5) {
                player.getPackets().sendGameMessage("Invalid class! Use 0-5 (0=Melee, 1=Ranged, 2=Magic, 3=Tank, 4=Hybrid, 5=Utility)");
                return;
            }
            
            if (intensity < 0.1 || intensity > 3.0) {
                player.getPackets().sendGameMessage("Invalid intensity! Use 0.1-3.0");
                return;
            }
            
            // Check if item exists
            ItemDefinitions itemDef = ItemDefinitions.getItemDefinitions(itemId);
            if (itemDef == null) {
                player.getPackets().sendGameMessage("Item " + itemId + " doesn't exist!");
                return;
            }
            
            // Backup original stats
            backupOriginalStats(itemId);
            
            // Apply changes
            boolean success = adjustItemStats(itemId, tier, classType, intensity, player.getUsername());
            
            if (success) {
                player.getPackets().sendGameMessage("Successfully adjusted " + itemDef.getName() + 
                    " to Tier " + tier + " Class " + classType + " (Intensity: " + intensity + ")");
                Logger.log("ItemBalancer", player.getUsername() + " adjusted item " + itemId);
            } else {
                player.getPackets().sendGameMessage("Failed to adjust item stats.");
            }
            
        } catch (NumberFormatException e) {
            player.getPackets().sendGameMessage("Invalid number format!");
        }
    }
    
    /**
     * Handle rollback command
     */
    public static void handleRollbackCommand(Player player, String[] args) {
        try {
            int itemId = Integer.parseInt(args[0]);
            
            if (rollbackItemStats(itemId)) {
                ItemDefinitions itemDef = ItemDefinitions.getItemDefinitions(itemId);
                player.getPackets().sendGameMessage("Restored original stats for " + 
                    (itemDef != null ? itemDef.getName() : "Item " + itemId));
                Logger.log("ItemBalancer", player.getUsername() + " rolled back item " + itemId);
            } else {
                player.getPackets().sendGameMessage("No backup found for item " + itemId);
            }
            
        } catch (NumberFormatException e) {
            player.getPackets().sendGameMessage("Invalid item ID!");
        }
    }
    
    /**
     * Apply stat changes to item
     */
    private static boolean adjustItemStats(int itemId, int tier, int classType, double intensity, String adminName) {
        try {
            // Generate new stats
            ItemStats newStats = generateStats(tier, classType, intensity);
            
            // Write to bonus file
            File bonusFile = new File("data/items/bonuses/" + itemId + ".txt");
            bonusFile.getParentFile().mkdirs();
            
            BufferedWriter writer = new BufferedWriter(new FileWriter(bonusFile));
            
            // Header
            writer.write("// Auto-generated by " + adminName + " - Tier " + tier + " Class " + classType);
            writer.newLine();
            
            // Attack bonuses
            writer.write(String.valueOf(newStats.stabAttack));
            writer.newLine();
            writer.write(String.valueOf(newStats.slashAttack));
            writer.newLine();
            writer.write(String.valueOf(newStats.crushAttack));
            writer.newLine();
            writer.write(String.valueOf(newStats.magicAttack));
            writer.newLine();
            writer.write(String.valueOf(newStats.rangedAttack));
            writer.newLine();
            
            // Defense bonuses
            writer.write("// Defense");
            writer.newLine();
            writer.write(String.valueOf(newStats.stabDefense));
            writer.newLine();
            writer.write(String.valueOf(newStats.slashDefense));
            writer.newLine();
            writer.write(String.valueOf(newStats.crushDefense));
            writer.newLine();
            writer.write(String.valueOf(newStats.magicDefense));
            writer.newLine();
            writer.write(String.valueOf(newStats.rangedDefense));
            writer.newLine();
            writer.write(String.valueOf(newStats.summoningDefense));
            writer.newLine();
            
            // Absorption
            writer.write("// Absorption");
            writer.newLine();
            writer.write(String.valueOf(newStats.meleeAbsorption));
            writer.newLine();
            writer.write(String.valueOf(newStats.magicAbsorption));
            writer.newLine();
            writer.write(String.valueOf(newStats.rangedAbsorption));
            writer.newLine();
            
            // Other bonuses
            writer.write("// Other");
            writer.newLine();
            writer.write(String.valueOf(newStats.strengthBonus));
            writer.newLine();
            writer.write(String.valueOf(newStats.rangedStrength));
            writer.newLine();
            writer.write(String.valueOf(newStats.prayerBonus));
            writer.newLine();
            writer.write(String.valueOf(newStats.magicDamage));
            writer.newLine();
            
            writer.close();
            return true;
            
        } catch (IOException e) {
            Logger.handle(e);
            return false;
        }
    }
    
    /**
     * Generate stats based on tier and class
     */
    private static ItemStats generateStats(int tier, int classType, double intensity) {
        ItemStats stats = new ItemStats();
        
        // Tier stat ranges
        int[] tierMins = {10, 160, 190, 260, 360};
        int[] tierMaxs = {150, 180, 250, 350, 500};
        
        int baseStat = (int)((tierMins[tier-1] + tierMaxs[tier-1]) / 2 * intensity);
        int primaryStat = (int)(tierMaxs[tier-1] * intensity);
        int secondaryStat = (int)(baseStat * 0.7);
        int tertiaryStat = (int)(baseStat * 0.3);
        
        // Apply class bonuses
        switch (classType) {
            case 0: // Melee
                stats.stabAttack = primaryStat;
                stats.slashAttack = primaryStat;
                stats.crushAttack = (int)(primaryStat * 0.9);
                stats.strengthBonus = primaryStat;
                stats.stabDefense = secondaryStat;
                stats.slashDefense = secondaryStat;
                stats.crushDefense = secondaryStat;
                stats.magicDefense = -secondaryStat;
                break;
                
            case 1: // Ranged
                stats.rangedAttack = primaryStat;
                stats.rangedStrength = primaryStat;
                stats.rangedDefense = primaryStat;
                stats.magicDefense = secondaryStat;
                stats.stabDefense = tertiaryStat;
                stats.slashDefense = tertiaryStat;
                stats.crushDefense = tertiaryStat;
                break;
                
            case 2: // Magic
                stats.magicAttack = primaryStat;
                stats.magicDamage = (int)(primaryStat * 0.8);
                stats.magicDefense = primaryStat;
                stats.stabDefense = -tertiaryStat;
                stats.slashDefense = -tertiaryStat;
                stats.crushDefense = -tertiaryStat;
                break;
                
            case 3: // Tank
                stats.stabDefense = primaryStat;
                stats.slashDefense = primaryStat;
                stats.crushDefense = primaryStat;
                stats.magicDefense = (int)(primaryStat * 0.8);
                stats.rangedDefense = primaryStat;
                stats.meleeAbsorption = (int)(secondaryStat * 0.3);
                stats.magicAbsorption = (int)(secondaryStat * 0.3);
                stats.rangedAbsorption = (int)(secondaryStat * 0.3);
                break;
                
            case 4: // Hybrid
                int balancedStat = (int)(baseStat * 0.8);
                stats.stabAttack = balancedStat;
                stats.slashAttack = balancedStat;
                stats.crushAttack = balancedStat;
                stats.magicAttack = balancedStat;
                stats.rangedAttack = balancedStat;
                stats.stabDefense = balancedStat;
                stats.slashDefense = balancedStat;
                stats.crushDefense = balancedStat;
                stats.magicDefense = balancedStat;
                stats.rangedDefense = balancedStat;
                stats.strengthBonus = balancedStat;
                stats.rangedStrength = balancedStat;
                stats.magicDamage = (int)(balancedStat * 0.6);
                break;
                
            case 5: // Utility
                stats.prayerBonus = Math.min(30, (int)(primaryStat * 0.2));
                int utilityStat = (int)(baseStat * 0.6);
                stats.stabAttack = utilityStat;
                stats.slashAttack = utilityStat;
                stats.stabDefense = utilityStat;
                stats.slashDefense = utilityStat;
                stats.crushDefense = utilityStat;
                break;
        }
        
        return stats;
    }
    
    /**
     * Backup original stats
     */
    private static void backupOriginalStats(int itemId) {
        if (originalStats.containsKey(itemId)) {
            return; // Already backed up
        }
        
        File bonusFile = new File("data/items/bonuses/" + itemId + ".txt");
        if (bonusFile.exists()) {
            try {
                ItemStats backup = loadStatsFromFile(bonusFile);
                originalStats.put(itemId, backup);
                Logger.log("ItemBalancer", "Backed up original stats for item " + itemId);
            } catch (Exception e) {
                Logger.handle(e);
            }
        }
    }
    
    /**
     * Load stats from file
     */
    private static ItemStats loadStatsFromFile(File file) throws IOException {
        ItemStats stats = new ItemStats();
        BufferedReader reader = new BufferedReader(new FileReader(file));
        
        // Skip header line
        String line = reader.readLine();
        
        // Read attack bonuses
        stats.stabAttack = parseIntSafely(reader.readLine());
        stats.slashAttack = parseIntSafely(reader.readLine());
        stats.crushAttack = parseIntSafely(reader.readLine());
        stats.magicAttack = parseIntSafely(reader.readLine());
        stats.rangedAttack = parseIntSafely(reader.readLine());
        
        // Skip separator
        reader.readLine();
        
        // Read defense bonuses
        stats.stabDefense = parseIntSafely(reader.readLine());
        stats.slashDefense = parseIntSafely(reader.readLine());
        stats.crushDefense = parseIntSafely(reader.readLine());
        stats.magicDefense = parseIntSafely(reader.readLine());
        stats.rangedDefense = parseIntSafely(reader.readLine());
        stats.summoningDefense = parseIntSafely(reader.readLine());
        
        // Skip separator
        reader.readLine();
        
        // Read absorption
        stats.meleeAbsorption = parseIntSafely(reader.readLine());
        stats.magicAbsorption = parseIntSafely(reader.readLine());
        stats.rangedAbsorption = parseIntSafely(reader.readLine());
        
        // Skip separator
        reader.readLine();
        
        // Read other bonuses
        stats.strengthBonus = parseIntSafely(reader.readLine());
        stats.rangedStrength = parseIntSafely(reader.readLine());
        stats.prayerBonus = parseIntSafely(reader.readLine());
        stats.magicDamage = parseIntSafely(reader.readLine());
        
        reader.close();
        return stats;
    }
    
    /**
     * Rollback to original stats
     */
    private static boolean rollbackItemStats(int itemId) {
        ItemStats backup = originalStats.get(itemId);
        if (backup == null) {
            return false;
        }
        
        try {
            File bonusFile = new File("data/items/bonuses/" + itemId + ".txt");
            BufferedWriter writer = new BufferedWriter(new FileWriter(bonusFile));
            
            writer.write("// Restored original stats");
            writer.newLine();
            
            // Write all backed up values
            writer.write(String.valueOf(backup.stabAttack));
            writer.newLine();
            writer.write(String.valueOf(backup.slashAttack));
            writer.newLine();
            writer.write(String.valueOf(backup.crushAttack));
            writer.newLine();
            writer.write(String.valueOf(backup.magicAttack));
            writer.newLine();
            writer.write(String.valueOf(backup.rangedAttack));
            writer.newLine();
            
            writer.write("// Defense");
            writer.newLine();
            writer.write(String.valueOf(backup.stabDefense));
            writer.newLine();
            writer.write(String.valueOf(backup.slashDefense));
            writer.newLine();
            writer.write(String.valueOf(backup.crushDefense));
            writer.newLine();
            writer.write(String.valueOf(backup.magicDefense));
            writer.newLine();
            writer.write(String.valueOf(backup.rangedDefense));
            writer.newLine();
            writer.write(String.valueOf(backup.summoningDefense));
            writer.newLine();
            
            writer.write("// Absorption");
            writer.newLine();
            writer.write(String.valueOf(backup.meleeAbsorption));
            writer.newLine();
            writer.write(String.valueOf(backup.magicAbsorption));
            writer.newLine();
            writer.write(String.valueOf(backup.rangedAbsorption));
            writer.newLine();
            
            writer.write("// Other");
            writer.newLine();
            writer.write(String.valueOf(backup.strengthBonus));
            writer.newLine();
            writer.write(String.valueOf(backup.rangedStrength));
            writer.newLine();
            writer.write(String.valueOf(backup.prayerBonus));
            writer.newLine();
            writer.write(String.valueOf(backup.magicDamage));
            writer.newLine();
            
            writer.close();
            return true;
            
        } catch (IOException e) {
            Logger.handle(e);
            return false;
        }
    }
    
    /**
     * Parse integer safely
     */
    private static int parseIntSafely(String value) {
        if (value == null || value.trim().isEmpty()) {
            return 0;
        }
        try {
            return Integer.parseInt(value.trim());
        } catch (NumberFormatException e) {
            return 0;
        }
    }
}