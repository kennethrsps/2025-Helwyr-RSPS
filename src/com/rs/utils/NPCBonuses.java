package com.rs.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.HashMap;

public final class NPCBonuses {
    private final static HashMap<Integer, int[]> npcBonuses = new HashMap<Integer, int[]>();
    private static final String PACKED_PATH = "data/npcs/packedBonuses.nb";

    public static int[] getBonuses(int id) {
	return npcBonuses.get(id);
    }

    public static void init() {
	if (new File(PACKED_PATH).exists())
	    loadPackedNPCBonuses();
	else
	    loadUnpackedNPCBonuses();
    }

    private static void loadPackedNPCBonuses() {
	try {
	    RandomAccessFile in = new RandomAccessFile(PACKED_PATH, "r");
	    FileChannel channel = in.getChannel();
	    ByteBuffer buffer = channel.map(MapMode.READ_ONLY, 0,
		    channel.size());
	    while (buffer.hasRemaining()) {
		int npcId = buffer.getShort() & 0xffff;
		int[] bonuses = new int[10];
		for (int i = 0; i < bonuses.length; i++)
		    bonuses[i] = buffer.getShort();
		npcBonuses.put(npcId, bonuses);
	    }
	    channel.close();
	    in.close();
	} catch (FileNotFoundException e) {
	    e.printStackTrace();
	} catch (IOException e) {
	    e.printStackTrace();
	}
    }

    @SuppressWarnings("resource")
    private static void loadUnpackedNPCBonuses() {
	Logger.log("NPCBonuses", "Packing npc bonuses...");
	try {
	    DataOutputStream out = new DataOutputStream(new FileOutputStream(
		    PACKED_PATH));
	    BufferedReader in = new BufferedReader(new FileReader(
		    "data/npcs/unpackedBonuses.txt"));
	    while (true) {
		String line = in.readLine();
		if (line == null)
		    break;
		if (line.startsWith("//"))
		    continue;
		String[] splitedLine = line.split(" - ", 2);
		if (splitedLine.length != 2)
		    throw new RuntimeException("Invalid NPC Bonuses line: "
			    + line);
		int npcId = Integer.parseInt(splitedLine[0]);
		String[] splitedLine2 = splitedLine[1].split(" ", 10);
		if (splitedLine2.length != 10)
		    throw new RuntimeException("Invalid NPC Bonuses line: "
			    + line);
		int[] bonuses = new int[10];
		out.writeShort(npcId);
		for (int i = 0; i < bonuses.length; i++) {
		    bonuses[i] = Integer.parseInt(splitedLine2[i]);
		    out.writeShort(bonuses[i]);
		}
		npcBonuses.put(npcId, bonuses);
	    }
	    in.close();
	    out.close();
	} catch (Throwable e) {
	    Logger.handle(e);
	}
    }

    private NPCBonuses() {

    }
    
 // Add these methods to your NPCBonuses class
    public static void setBonuses(int npcId, int[] bonuses) {
        if (bonuses == null || bonuses.length != 10) {
            throw new IllegalArgumentException("NPC bonuses must be an array of exactly 10 integers");
        }
        int[] bonusesCopy = new int[10];
        System.arraycopy(bonuses, 0, bonusesCopy, 0, 10);
        npcBonuses.put(npcId, bonusesCopy);
    }

    public static void removeBonuses(int npcId) {
        npcBonuses.remove(npcId);
    }

    public static boolean hasBonuses(int npcId) {
        return npcBonuses.containsKey(npcId);
    }
 // Add these methods to your existing NPCBonuses.java class

  

    

    /**
     * Save NPC bonuses to individual file
     */
    private static void saveNPCBonusesToFile(int npcId, int[] bonuses) {
        try {
            File bonusDir = new File("data/npcs/customBonuses/");
            if (!bonusDir.exists()) {
                bonusDir.mkdirs();
            }
            
            File bonusFile = new File(bonusDir, npcId + ".txt");
            
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(bonusFile))) {
                writer.write("// NPC " + npcId + " bonuses - Generated by BossBalancer v2.0");
                writer.newLine();
                writer.write(npcId + " - ");
                
                for (int i = 0; i < bonuses.length; i++) {
                    writer.write(String.valueOf(bonuses[i]));
                    if (i < bonuses.length - 1) {
                        writer.write(" ");
                    }
                }
                writer.newLine();
            }
            
        } catch (IOException e) {
            System.err.println("Failed to save NPC bonuses file: " + e.getMessage());
        }
    }

    /**
     * Get maximum bonus from array
     */
    private static int getMaxBonus(int[] bonuses) {
        int max = 0;
        for (int bonus : bonuses) {
            if (bonus > max) max = bonus;
        }
        return max;
    }

    public static void loadCustomBossBonuses() {
        File bonusDir = new File("data/npcs/customBonuses/");
        if (!bonusDir.exists()) {
            return;
        }
        
        File[] bonusFiles = bonusDir.listFiles((dir, name) -> name.endsWith(".txt"));
        if (bonusFiles == null) return;
        
        int loaded = 0;
        for (File file : bonusFiles) {
            try {
                String fileName = file.getName();
                int npcId = Integer.parseInt(fileName.substring(0, fileName.length() - 4));
                
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line = reader.readLine();
                reader.close();
                
                if (line != null && !line.startsWith("//")) {
                    String[] parts = line.split(" - ", 2);
                    if (parts.length == 2) {
                        String[] bonusStrings = parts[1].split(" ");
                        if (bonusStrings.length == 10) {
                            int[] bonuses = new int[10];
                            for (int i = 0; i < 10; i++) {
                                bonuses[i] = Integer.parseInt(bonusStrings[i]);
                            }
                            setBonuses(npcId, bonuses);
                            loaded++;
                        }
                    }
                }
            } catch (Exception e) {
                System.err.println("Failed to load custom bonus for " + file.getName());
            }
        }
        
        if (loaded > 0) {
            Logger.log("NPCBonuses", "Loaded " + loaded + " custom boss bonuses");
        }
        
        
    }
}
